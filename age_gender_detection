import os
import cv2
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.utils.class_weight import compute_class_weight

import tensorflow as tf
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import (Conv2D, MaxPool2D, Dense, Dropout, 
                                    BatchNormalization, Flatten, Input,
                                    GlobalAveragePooling2D, concatenate)
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import (ModelCheckpoint, EarlyStopping, 
                                       ReduceLROnPlateau, TensorBoard)
from tensorflow.keras.regularizers import l2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical

# Constants
IMG_SIZE = (200, 200)
BATCH_SIZE = 64
EPOCHS = 100
PATIENCE = 10
LEARNING_RATE = 0.001
NUM_CLASSES_GENDER = 2
NUM_CLASSES_AGE = 10  # For age classification (binned into 10 groups)

class DataProcessor:
    def __init__(self, path):
        self.path = path
        self.images = []
        self.ages = []
        self.genders = []
        
    def load_data(self):
        """Load and preprocess images from the dataset"""
        for img_name in os.listdir(self.path):
            try:
                # Parse age and gender from filename
                age = int(img_name.split("_")[0])
                gender = int(img_name.split("_")[1])
                
                # Read and preprocess image
                img = cv2.imread(os.path.join(self.path, img_name))
                img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                img = cv2.resize(img, IMG_SIZE)
                
                self.images.append(img)
                self.ages.append(age)
                self.genders.append(gender)
            except Exception as e:
                print(f"Skipping {img_name}: {str(e)}")
                
        # Convert to numpy arrays and normalize images
        self.images = np.array(self.images, dtype=np.float32) / 255.0
        self.ages = np.array(self.ages)
        self.genders = np.array(self.genders)
        
        return self.images, self.ages, self.genders
    
    def create_age_bins(self, num_bins=NUM_CLASSES_AGE):
        """Convert continuous age to binned categories"""
        bins = np.linspace(self.ages.min(), self.ages.max(), num_bins+1)
        age_labels = np.digitize(self.ages, bins[:-1]) - 1
        return to_categorical(age_labels, num_classes=num_bins)
    
    def augment_data(self):
        """Create image data generator with augmentation"""
        return ImageDataGenerator(
            rotation_range=20,
            width_shift_range=0.2,
            height_shift_range=0.2,
            shear_range=0.2,
            zoom_range=0.2,
            horizontal_flip=True,
            fill_mode='nearest'
        )

class MultiTaskModel:
    def __init__(self, input_shape):
        self.input_shape = input_shape
        
    def build_base_model(self):
        """Build shared feature extraction layers"""
        inputs = Input(shape=self.input_shape)
        
        # EfficientNet backbone (pretrained on ImageNet)
        base_model = EfficientNetB0(
            include_top=False,
            weights='imagenet',
            input_tensor=inputs,
            pooling='max'
        )
        
        # Fine-tune from this layer onwards
        for layer in base_model.layers[:100]:
            layer.trainable = False
            
        return base_model
    
    def build_multi_task_model(self):
        """Build multi-task model predicting both age and gender"""
        base_model = self.build_base_model()
        
        # Shared layers
        x = base_model.output
        x = Dense(1024, activation='relu')(x)
        x = Dropout(0.5)(x)
        x = BatchNormalization()(x)
        
        # Age prediction branch (regression)
        age_branch = Dense(512, activation='relu')(x)
        age_branch = Dropout(0.3)(age_branch)
        age_output = Dense(1, activation='linear', name='age_output')(age_branch)
        
        # Gender prediction branch (classification)
        gender_branch = Dense(512, activation='relu')(x)
        gender_branch = Dropout(0.3)(gender_branch)
        gender_output = Dense(1, activation='sigmoid', name='gender_output')(gender_branch)
        
        model = Model(
            inputs=base_model.input,
            outputs=[age_output, gender_output],
            name='multi_task_model'
        )
        
        return model
    
    def compile_model(self, model):
        """Compile model with custom loss weights"""
        model.compile(
            optimizer=Adam(learning_rate=LEARNING_RATE),
            loss={
                'age_output': 'mse',
                'gender_output': 'binary_crossentropy'
            },
            loss_weights={
                'age_output': 0.5,
                'gender_output': 0.5
            },
            metrics={
                'age_output': ['mae'],
                'gender_output': ['accuracy']
            }
        )
        return model
    
    def get_callbacks(self):
        """Define training callbacks"""
        return [
            EarlyStopping(monitor='val_loss', patience=PATIENCE),
            ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=PATIENCE//2),
            ModelCheckpoint(
                'best_model.h5',
                monitor='val_loss',
                save_best_only=True,
                save_weights_only=False
            ),
            TensorBoard(log_dir='./logs')
        ]

class ModelEvaluator:
    @staticmethod
    def plot_history(history):
        """Plot training history for all metrics"""
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        
        # Age metrics
        axes[0, 0].plot(history.history['age_output_loss'], label='Train')
        axes[0, 0].plot(history.history['val_age_output_loss'], label='Validation')
        axes[0, 0].set_title('Age Loss (MSE)')
        axes[0, 0].legend()
        
        axes[0, 1].plot(history.history['age_output_mae'], label='Train')
        axes[0, 1].plot(history.history['val_age_output_mae'], label='Validation')
        axes[0, 1].set_title('Age MAE')
        axes[0, 1].legend()
        
        # Gender metrics
        axes[1, 0].plot(history.history['gender_output_loss'], label='Train')
        axes[1, 0].plot(history.history['val_gender_output_loss'], label='Validation')
        axes[1, 0].set_title('Gender Loss')
        axes[1, 0].legend()
        
        axes[1, 1].plot(history.history['gender_output_accuracy'], label='Train')
        axes[1, 1].plot(history.history['val_gender_output_accuracy'], label='Validation')
        axes[1, 1].set_title('Gender Accuracy')
        axes[1, 1].legend()
        
        plt.tight_layout()
        plt.show()
    
    @staticmethod
    def evaluate_model(model, x_test, y_test_age, y_test_gender):
        """Evaluate model performance"""
        # Predictions
        age_pred, gender_pred = model.predict(x_test)
        gender_pred = (gender_pred > 0.5).astype(int)
        
        # Age evaluation
        age_mae = metrics.mean_absolute_error(y_test_age, age_pred)
        print(f"Age MAE: {age_mae:.2f} years")
        
        # Gender evaluation
        gender_acc = metrics.accuracy_score(y_test_gender, gender_pred)
        print(f"Gender Accuracy: {gender_acc:.4f}")
        print("\nClassification Report:")
        print(classification_report(y_test_gender, gender_pred))
        
        # Confusion matrix
        cm = confusion_matrix(y_test_gender, gender_pred)
        plt.figure(figsize=(6, 6))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
        plt.title('Gender Confusion Matrix')
        plt.xlabel('Predicted')
        plt.ylabel('Actual')
        plt.show()

def main():
    # Initialize and load data
    data_processor = DataProcessor("UTKFace/UTKFace")
    images, ages, genders = data_processor.load_data()
    
    # Split data
    x_train, x_test, y_train_age, y_test_age, y_train_gender, y_test_gender = train_test_split(
        images, ages, genders, test_size=0.2, random_state=42, stratify=genders
    )
    
    # Build and train model
    model_builder = MultiTaskModel(input_shape=(*IMG_SIZE, 3))
    model = model_builder.build_multi_task_model()
    model = model_builder.compile_model(model)
    
    print(model.summary())
    
    # Train model
    history = model.fit(
        x_train,
        {'age_output': y_train_age, 'gender_output': y_train_gender},
        validation_data=(
            x_test,
            {'age_output': y_test_age, 'gender_output': y_test_gender}
        ),
        batch_size=BATCH_SIZE,
        epochs=EPOCHS,
        callbacks=model_builder.get_callbacks()
    )
    
    # Evaluate model
    evaluator = ModelEvaluator()
    evaluator.plot_history(history)
    
    # Load best model and evaluate
    best_model = tf.keras.models.load_model('best_model.h5')
    evaluator.evaluate_model(best_model, x_test, y_test_age, y_test_gender)

if __name__ == "__main__":
    main()
